// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :exec
insert into projects (name, description, leader_id)
values (?, ?, ?)
`

type CreateProjectParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	LeaderID    int64          `json:"leader_id"`
}

// project
func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) error {
	_, err := q.exec(ctx, q.createProjectStmt, createProject, arg.Name, arg.Description, arg.LeaderID)
	return err
}

const createTask = `-- name: CreateTask :exec
insert into tasks (project_id, mantainer_id, name, description, created_at)
values (?, ?, ?, ?, ?)
`

type CreateTaskParams struct {
	ProjectID   int64          `json:"project_id"`
	MantainerID int64          `json:"mantainer_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

// tasks
func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.exec(ctx, q.createTaskStmt, createTask,
		arg.ProjectID,
		arg.MantainerID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
insert into users (username, password, invite)
values (?, ?, ?)
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Invite   string `json:"invite"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser, arg.Username, arg.Password, arg.Invite)
	return err
}

const getProjectById = `-- name: GetProjectById :one
select id, name, description, leader_id from projects
where id = ?
`

func (q *Queries) GetProjectById(ctx context.Context, id int64) (Project, error) {
	row := q.queryRow(ctx, q.getProjectByIdStmt, getProjectById, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.LeaderID,
	)
	return i, err
}

const getProjectsByLeader = `-- name: GetProjectsByLeader :many
select id, name, description, leader_id from projects
where leader_id = ?
order by name
`

func (q *Queries) GetProjectsByLeader(ctx context.Context, leaderID int64) ([]Project, error) {
	rows, err := q.query(ctx, q.getProjectsByLeaderStmt, getProjectsByLeader, leaderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.LeaderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectsByName = `-- name: GetProjectsByName :many
select id, name, description, leader_id from projects
where name like '%' || ? || '%'
`

func (q *Queries) GetProjectsByName(ctx context.Context, dollar_1 sql.NullString) ([]Project, error) {
	rows, err := q.query(ctx, q.getProjectsByNameStmt, getProjectsByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.LeaderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskById = `-- name: GetTaskById :one
select id, project_id, mantainer_id, status, name, description, created_at, updated_at from tasks
where id = ?
`

func (q *Queries) GetTaskById(ctx context.Context, id int64) (Task, error) {
	row := q.queryRow(ctx, q.getTaskByIdStmt, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.MantainerID,
		&i.Status,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasksByMaintainer = `-- name: GetTasksByMaintainer :many
select id, project_id, mantainer_id, status, name, description, created_at, updated_at from tasks
where mantainer_id = ?
`

func (q *Queries) GetTasksByMaintainer(ctx context.Context, mantainerID int64) ([]Task, error) {
	rows, err := q.query(ctx, q.getTasksByMaintainerStmt, getTasksByMaintainer, mantainerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.MantainerID,
			&i.Status,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByName = `-- name: GetTasksByName :many
select id, project_id, mantainer_id, status, name, description, created_at, updated_at from tasks
where name like '%' || ? || '%'
`

func (q *Queries) GetTasksByName(ctx context.Context, dollar_1 sql.NullString) ([]Task, error) {
	rows, err := q.query(ctx, q.getTasksByNameStmt, getTasksByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.MantainerID,
			&i.Status,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByProject = `-- name: GetTasksByProject :many
select id, project_id, mantainer_id, status, name, description, created_at, updated_at from tasks
where project_id = ?
`

func (q *Queries) GetTasksByProject(ctx context.Context, projectID int64) ([]Task, error) {
	rows, err := q.query(ctx, q.getTasksByProjectStmt, getTasksByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.MantainerID,
			&i.Status,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByCred = `-- name: GetUserByCred :one
select id from users
where username = ? and password = ?
`

type GetUserByCredParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) GetUserByCred(ctx context.Context, arg GetUserByCredParams) (int64, error) {
	row := q.queryRow(ctx, q.getUserByCredStmt, getUserByCred, arg.Username, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserById = `-- name: GetUserById :one
select id, invite, username, password from users
where id = ?
`

// user
func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserByIdStmt, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Invite,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const getUserByInvite = `-- name: GetUserByInvite :one
select id, invite, username, password from users
where invite = ?
`

func (q *Queries) GetUserByInvite(ctx context.Context, invite string) (User, error) {
	row := q.queryRow(ctx, q.getUserByInviteStmt, getUserByInvite, invite)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Invite,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const updateProjectDescriptionById = `-- name: UpdateProjectDescriptionById :exec
update projects set description = ?
where id = ?
`

type UpdateProjectDescriptionByIdParams struct {
	Description sql.NullString `json:"description"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateProjectDescriptionById(ctx context.Context, arg UpdateProjectDescriptionByIdParams) error {
	_, err := q.exec(ctx, q.updateProjectDescriptionByIdStmt, updateProjectDescriptionById, arg.Description, arg.ID)
	return err
}

const updateProjectNameById = `-- name: UpdateProjectNameById :exec
update projects set name = ?
where id = ?
`

type UpdateProjectNameByIdParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateProjectNameById(ctx context.Context, arg UpdateProjectNameByIdParams) error {
	_, err := q.exec(ctx, q.updateProjectNameByIdStmt, updateProjectNameById, arg.Name, arg.ID)
	return err
}

const updateTaskStatusById = `-- name: UpdateTaskStatusById :exec
update tasks set status = ?, updated_at = ?
where id = ?
`

type UpdateTaskStatusByIdParams struct {
	Status    int64        `json:"status"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	ID        int64        `json:"id"`
}

func (q *Queries) UpdateTaskStatusById(ctx context.Context, arg UpdateTaskStatusByIdParams) error {
	_, err := q.exec(ctx, q.updateTaskStatusByIdStmt, updateTaskStatusById, arg.Status, arg.UpdatedAt, arg.ID)
	return err
}
